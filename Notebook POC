import nest_asyncio
nest_asyncio.apply()

import os
import logging
import uuid
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters
)
from langchain_groq import ChatGroq
from langchain_core.tools import tool
from typing import Optional

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# In-memory store for payments
TRANSACTIONS = {}

# ---- Define Tools for AI to Call ----
@tool
def mullet_payment_tool(amount: float, token: str, recipient: str, reason: Optional[str] = "No reason provided") -> str:
    """Handles payment creation when AI detects a transaction request from user input."""
    txn_id = str(uuid.uuid4())

    TRANSACTIONS[txn_id] = {
        "amount": amount,
        "token": token,
        "recipient": recipient,
        "reason": reason,
        "sender_id": "AI_CALL",  # Placeholder since AI doesn't have a Telegram user ID
    }

    payment_link = f"https://mul.let/"
    return (
        f"✅ Payment Link Created!\n\n"
        f"💵 Amount: {amount} {token}\n"
        f"🙋 Recipient: {recipient}\n"
        f"📝 Reason: {reason}\n"
        f"💻 Pay here: {payment_link}\n\n"
        "🚀 Review, and then click to confirm and keep fees where they belong—out of your wallet! 💰"
    )


@tool
def list_payments_tool() -> str:
    """Handles listing past transactions when AI detects a relevant query."""
    if not TRANSACTIONS:
        return "🤷 No payments found."

    lines = []
    for txn_id, data in TRANSACTIONS.items():
        line = (
            f"   🙋 Recipient: {data['recipient']}\n"
            f"   💵 Amount: {data['amount']} {data['token']}\n"
            f"   📝 Reason: {data['reason']}\n"
        )
        lines.append(line)

    return "📜 Your Payments:\n\n" + "\n".join(lines)


# ---- AI Response Function with Tool Calling ----
async def getAIresponse(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text

    llm = ChatGroq(
        model="llama-3.3-70b-versatile",
        temperature=0,
        max_tokens=None,
        timeout=None,
        max_retries=2,
    )

    tools = [mullet_payment_tool, list_payments_tool]
    llm_with_tools = llm.bind_tools(tools)

    messages = [
        {
            "role": "system",
            "content": (
                "👋 You are a helpful Telegram bot. Your tone is friendly, casual, and lightly irreverent, mixing playfulness with a clear, conversational style. "
                "Use well-placed emoji: 🚀 for excitement, 🤓 for nerdy info, 💡 for insights, 🔥 for hot tips, etc."
                "If the user is attempting to create a payment, but has not provided a recipient, amount, or currency/token (for exampple: canadian, us, usdc, dai),  prompt the user for the missing details before creating the payment"
            )
        },
        {"role": "user", "content": user_input},
    ]

    response = await llm_with_tools.ainvoke(messages)

    # Check if AI wants to call a function
    if response.tool_calls:
        for call in response.tool_calls:
            tool_name = call["name"]
            tool_args = call["args"]

            if tool_name == "mullet_payment_tool":
                tool_args["sender_id"] = update.effective_user.id
                response_text = mullet_payment_tool.invoke(tool_args)
            elif tool_name == "list_payments_tool":
                response_text = list_payments_tool.invoke({})
            else:
                response_text = "🤖 Oops! The AI tried to call an unknown function."

            await update.message.reply_text(response_text, parse_mode=None, disable_web_page_preview=True)
        return  

    response_text = response.content if response.content else "🤖 Oops! Something went wrong. Try again."
    await update.message.reply_text(response_text, parse_mode=None, disable_web_page_preview=True)


# ---- Command Handlers (Unchanged) ----
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    welcome_text = (
        "👋 Hey there, welcome to Mullet!\n\n"
        "💬 Just talk to me like we're old friends. Want to send someone $1000 USD?\n\n"
        "Just type “Send 1000 USDC to alice@email.com” and I'll handle the rest.\n\n"
        "🚀 No commands needed, but if you like them, type /help."
    )
    await update.message.reply_text(welcome_text, parse_mode=None)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "🤖 Mullet Bot Commands\n\n"
        "🚀  /start — Welcome message.\n"
        "ℹ️  /help — Show this help message.\n"
        "💸  /mullet <amount> <currency> <recipient> <optional-reason>\n"
        "📜  /list — See all your past payments.\n\n"
        "🔥 Or just type:\n"
        "`Send 100 USDC to @bob for rent`\n"
        "I'll handle the rest! 💡"
    )
    await update.message.reply_text(help_text, parse_mode=None)


async def mullet_payment_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message_text = update.message.text
    parts = message_text.split(None, 4)

    if len(parts) < 4:
        error_msg = (
            "❌ Invalid format.\n\n"
            "Usage: `/mullet <amount> <token> <recipient> [reason]`\n"
            "Example: `/mullet 100 USDC @bob Rent`"
        )
        await update.message.reply_text(error_msg, parse_mode=None)
        return

    amount_str = parts[1]
    token = parts[2]
    recipient = parts[3]
    reason = parts[4] if len(parts) > 4 else "No reason provided"

    response_text = mullet_payment_tool.invoke({
        "amount": float(amount_str),
        "token": token,
        "recipient": recipient,
        "reason": reason,
        "sender_id": update.effective_user.id
    })
    await update.message.reply_text(response_text, parse_mode=None, disable_web_page_preview=True)


async def list_payments_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    response_text = list_payments_tool.invoke({})
    await update.message.reply_text(response_text, parse_mode=None)


async def echo_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await getAIresponse(update, context)


# ---- Setup the Bot ----
BOT_TOKEN = os.getenv("MULLET_BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")

app = ApplicationBuilder().token(BOT_TOKEN).build()

# Register command handlers
app.add_handler(CommandHandler("start", start_command))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("mullet", mullet_payment_command))
app.add_handler(CommandHandler("list", list_payments_command))

# Fallback for all non-command text
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo_message))

# ✅ Run bot
app.run_polling()

